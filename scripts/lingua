#!/usr/bin/env python
import rospy
import time

from lingua.ccg_reader import CCGReader
from lingua.leaves import Root, Method
from lingua.types import *

from rv_trees.trees import BehaviourTree

from py_trees import Status
from py_trees.composites import Composite

from std_msgs.msg import String
from openccg_ros.srv import Parse

Method.methods['pick_up(object arg0)'] = Method(
  name='pick_up(object arg0)',
  root = {
    'type': 'sequence',
    'children': [
      {
        'type': 'behaviour',
        'method_name': 'open(tool arg0)'
      }, {
        'type': 'behaviour',
        'method_name': 'move_to(tool arg0, object arg1)',
        'args': {
          'mapping': {
            'arg1': 'arg0'
          }
        }
      },
      {
        'type': 'behaviour',
        'method_name': 'close(tool arg0)'
      }
    ]
  }
)

Method.methods['open(tool arg0)'] = Method(
  name='open(tool arg0)',
  root = {
    'type': 'sequence',
    'children': [{
      'name': 'open gripper',
      'type': 'class',
      'package': 'rv_leaves.leaves.manipulation.grasping',
      'class_name': 'ActuateGripper',
    }]
  }
)

Method.methods['close(tool arg0)'] = Method(
  name='close(tool arg0)',
  root = {
    'type': 'sequence',
    'children': [{
      'name': 'close gripper',
      'type': 'class',
      'package': 'rv_leaves.leaves.manipulation.grasping',
      'class_name': 'Grasp',
    }]
  }
)

Method.methods['move_to(tool arg0, object arg1)'] = Method(
  name='move_to(tool arg0, object arg1)',
  root = {
    'type': 'sequence',
    'children': [
      {
        'type': 'class',
        'package': 'lingua.leaves',
        'class_name': 'GetObjectPose',
        'args': {
          'load_value': 'method:arg1',
        },
      },
      {
        'type': 'class',
        'package': 'rv_leaves.leaves.generic.console',
        'class_name': 'Print',
      },
      {
        'type': 'class',
        'package': 'rv_leaves.leaves.manipulation.motion',
        'class_name': 'MoveGripperToPose',
      }
    ]
  }
)

class LinguaROS(object):
  def __init__(self):
    super(LinguaROS, self).__init__()

    self.sub_speech = rospy.Subscriber('/speech', String, self.speech_cb)
    self.parser = rospy.ServiceProxy('/ccg/parse', Parse)

    self.root = Root()
    self.tree = BehaviourTree('lingua', root=self.root)
    
    self.input_stack = []

    self.focus = None
    self.topic = None

  def speech_cb(self, msg):
    # Get XML parses from CCG parser for input text
    result = self.parser(msg.data
      .replace(',', ' , ')
      .replace('  ', ' ')
    )

    for xml in result.parses:
    
      utterance, t = CCGReader.read(xml)
    
      if t:
        print(t)
        self.input_stack.append(utterance)
        self.handle_anaphora(t)

        subtree = t.to_btree()
        
        if not subtree.setup(timeout=5):
          continue
        
        print(str(t))

        self.root.add_child(subtree)
        break
        
  def run(self):
    self.tree.setup(0)
    
    while not rospy.is_shutdown():
      self.tree.tick()
      rospy.sleep(0.1)

  def handle_anaphora(self, node):
    replace = False

    if isinstance(node, Conditional):
      if node.is_inverted():
        if self.handle_anaphora(node.get_body()):
          node.set_body(self.topic[1])
        if self.handle_anaphora(node.get_condition()):
          node.set_condition(self.topic[1])
      else:
        if self.handle_anaphora(node.get_condition()):
          node.set_condition(self.topic[1])
        if self.handle_anaphora(node.get_body()):
          node.set_body(self.topic[1])

    if isinstance(node, Conjunction):
      if self.handle_anaphora(node.get_left()):
        node.set_left(self.topic[1])
      if self.handle_anaphora(node.get_right()):
        node.set_right(self.topic[1])

    if isinstance(node, Assertion):
      if self.handle_anaphora(node.get_body()):
        node.set_body(self.topic[1])

    if isinstance(node, Task):
      located = False

      for key in node.get_argument_keys():
        if isinstance(node.get_argument(key), Assertion):
          if self.handle_anaphora(node.get_argument(key).get_descriptor()):
              node.get_argument(key).set_descriptor(self.topic[1])

        elif (isinstance(node.get_argument(key), Conjunction)):
          if self.handle_anaphora(node.get_argument(key).get_left()):
              node.get_argument(key).set_left(self.topic[1])
          if self.handle_anaphora(node.get_argument(key).get_right()):
              node.get_argument(key).set_right(self.topic[1])

        elif isinstance(node.get_argument(key), Anaphora):
          if not self.topic:
              raise Exception(self.input_stack[-1].replace(' it ', ' what ') + '?')

          node.set_argument_type(key, self.topic[0])
          node.set_argument(key, self.topic[1])

          located = True

      if not located:
        for key in node.get_argument_keys():
          self.topic = (node.get_argument_type(key), node.get_argument(key))
          break

      return False

    if isinstance(node, Object):
      if isinstance(node, Anaphora):
        if not self.topic:
          raise Exception(self.input_stack[-1].replace(' it ', ' what ') + '?')
        return True
      
      self.topic = (node.get_type_name(), node)

    return replace

# task = CCGReader.read('<xml><lf><satop nom="w2:object"><prop name="ball"/><diamond mode="det"><prop name="the"/></diamond><diamond mode="num"><prop name="sg"/></diamond><diamond mode="mod"><nom name="w1:color"/><prop name="red"/></diamond></satop></lf><target>the red ball</target></xml>')
# print(task)
if __name__ == '__main__':
  rospy.init_node('lingua')

  lingua = LinguaROS()
  lingua.run()