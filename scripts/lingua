#!/usr/bin/env python

from __future__ import print_function
import sys
from py_trees import Status
from rv_trees.trees import BehaviourTree
from lingua import Method, Subtree
from lingua.types import Object
from lingua_pddl.parser import Parser

import rospy

from std_msgs.msg import String
from lingua_kb.srv import Tell

Method.methods['open_close(tool arg0)'] = Method(
  name = 'open_close(tool arg0)', 
  root = {
    'name': 'open_close(tool arg0)',
    'type': 'sequence',
    'children': [
      {
        'name': 'open',
        'type': 'behaviour',
        'args': {
          'method_name': 'open(tool arg0)',
          'mapping': {
            'arg0': 'arg0'
          }
        }
      },
      {
        'name': 'close',
        'type': 'behaviour',
        'args': {
          'method_name': 'close(tool arg0)',
          'mapping': {
            'arg0': 'arg0'
          }
        }
      }
    ]
  }
)

Method.methods['open(tool arg0)'] = Method(
  name='open(tool arg0)',
  root = {
    'name': 'open(tool arg0)',
    'type': 'selector',
    'children': [
      {
        'name': 'postcondition:(open arg0)',
        'type': 'postcondition',
        'args': {
          'condition': '(open arg0)'
        }
      },
      {
        'name': 'do open gripper',
        'type': 'sequence',
        'children': [
          {
            'name': 'precondition:(not (open arg0))',
            'type': 'precondition',
            'args': {
              'condition': '(not (open arg0))'
            }
          },
          {
            'name': 'open gripper',
            'type': 'action',
            'args': {
              'action_namespace': 'count',
              'load_value': 2
            }
          },
          {
            'name': 'effect:(open arg0)',
            'type': 'effect',
            'args': {
              'condition': '(open arg0)'
            }
          }
        ]
      }
    ]
  }
)

Method.methods['close(tool arg0)'] = Method(
  name='open(tool arg0)',
  root = {
    'name': 'close(tool arg0)',
    'type': 'selector',
    'children': [
      {
        'name': 'postcondition:(not (open arg0))',
        'type': 'postcondition',
        'args': {
          'condition': '(not (open arg0))'
        }
      },
      {
        'name': 'do open gripper',
        'type': 'sequence',
        'children': [
          {
            'name': 'precondition:(open arg0)',
            'type': 'precondition',
            'args': {
              'condition': '(open arg0)'
            }
          },
          {
            'name': 'open gripper',
            'type': 'action',
            'args': {
              'action_namespace': 'count',
              'load_value': 2
            }
          },
          {
            'name': 'effect:(not (open arg0))',
            'type': 'effect',
            'args': {
              'condition': '(not (open arg0))'
            }
          }
        ]
      }
    ]
  }
)

def tree():
  tell = rospy.ServiceProxy('/kb/tell', Tell)
  tell.wait_for_service()

  tell('(tool g0)')
  tell('(tool g1)')
  tell('(tool g2)')
  # tell('(not (open g0))')

  bt = BehaviourTree('test', root=Method.methods['open_close(tool arg0)'].instantiate({'arg0': Object('(tool ?)')}))
  bt.run(hz=1, exit_on=Status.SUCCESS)
  
if __name__ == '__main__':
    rospy.init_node("test_bt")
    Parser.init()
    tree()  