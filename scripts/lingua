#!/usr/bin/env python

from __future__ import print_function
import sys
from py_trees import Status
from rv_trees.trees import BehaviourTree
from lingua import Method, Subtree
from lingua.parser import Parser
from lingua.types import Object

import rospy

from std_msgs.msg import String

Method.methods['touch(obj arg0)'] = Method(
  name = 'touch(obj arg0)', 
  root = {
    'name': 'Subtree-1',
    'type': 'sequence',
    'children': [
      {
        'name': 'Hello',
        'type': 'publisher',
        'args': {
          'topic_name': 'echo',
          'topic_class': String,
          'load_value': '(holding arg0)'
        }
      },
      {
        'name': 'Counter',
        'type': 'action',
        'args': {
          'action_namespace': 'count',
          'load_value': 5
        }
      },
      {
        'name': 'subtree',
        'type': 'behaviour',
        'args': {
          'method_name': 'tetch(obj arg0)',
          'mapping': {
            'arg0': 'arg0'
          }
        }
      }
    ]
  }
)

Method.methods['tetch(obj arg0)'] = Method(
  name='tetch(obj arg0)',
  root = {
    'name': 'Subtree-2',
    'type': 'sequence',
    'children': [
      {
        'name': 'Sub-Counter',
        'type': 'action',
        'args': {
          'action_namespace': 'count',
          'load_value': 3
        }
      },
      {
        'name': 'Good-bye',
        'type': 'publisher',
        'args': {
          'topic_name': 'echo',
          'topic_class': String,
          'load_value': 'Good-bye'
        }
      }
    ]
  }
)


def tree():
  bt = BehaviourTree('test', root=Method.methods['touch(obj arg0)'].instantiate({'arg0': Object('(ball ?)')}))
  bt.run(hz=1, exit_on=Status.SUCCESS)
  
if __name__ == '__main__':
    rospy.init_node("test_bt")
    Parser.init()
    tree()  