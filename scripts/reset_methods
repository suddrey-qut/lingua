#!/usr/bin/env python
import rospy
from lingua.method import Method

Method.methods['pick_up(object arg0)'] = Method(
  name='pick_up(object arg0)',
  root = {
    'type': 'sequence',
    'children': [
      {
        'type': 'behaviour',
        'method_name': 'open(tool arg0)'
      }, {
        'type': 'behaviour',
        'method_name': 'move_to(tool arg0, object arg1)',
        'args': {
          'mapping': {
            'arg1': 'arg0'
          }
        }
      },
      {
        'type': 'behaviour',
        'method_name': 'close(tool arg0)'
      }
    ]
  }
)

Method.methods['open(tool arg0)'] = Method(
  name='open(tool arg0)',
  preconditions=[{
    'type': 'decorator',
    'package': 'lingua.decorators',
    'class_name': 'Conditional',
    'child': {
        'type': 'decorator',
        'package': 'py_trees.decorators',
        'class_name': 'Inverter',
        'child': {
          'type': 'class',
          'package': 'rv_leaves.leaves.manipulation.grasping',
          'class_name': 'IsGripperOpen'
        }
    },
    'args': {
      'predicate': '(not (open ${arg0}))'
    }
  }],
  # postconditions=[{
  #   'type': 'decorator',
  #   'package': 'lingua.decorators',
  #   'class_name': 'Conditional',
  #   'child': {
  #       'type': 'class',
  #       'package': 'rv_leaves.leaves.manipulation.grasping',
  #       'class_name': 'IsGripperOpen'
  #   },
  #   'args': {
  #     'predicate': '(open ${arg0})'
  #   }
  # }],
  root = {
    'type': 'sequence',
    'children': [{
      'name': 'open gripper',
      'type': 'class',
      'package': 'rv_leaves.leaves.manipulation.grasping',
      'class_name': 'ActuateGripper',
    }]
  }
)

Method.methods['close(tool arg0)'] = Method(
  name='close(tool arg0)',
  preconditions=[{
    'type': 'decorator',
    'package': 'lingua.decorators',
    'class_name': 'Conditional',
    'child': {
      'type': 'class',
      'package': 'rv_leaves.leaves.manipulation.grasping',
      'class_name': 'IsGripperOpen'
    },
    'args': {
      'predicate': '(open ${arg0})'
    }
  }],
  postconditions=[{
    'type': 'decorator',
    'package': 'lingua.decorators',
    'class_name': 'Conditional',
    'child': {
        'type': 'decorator',
        'package': 'py_trees.decorators',
        'class_name': 'Inverter',
        'child': {
          'type': 'class',
          'package': 'rv_leaves.leaves.manipulation.grasping',
          'class_name': 'IsGripperOpen'
        }
    },
    'args': {
      'predicate': '(not (open ${arg0}))'
    }
  }],
  root = {
    'type': 'sequence',
    'children': [{
      'name': 'close gripper',
      'type': 'class',
      'package': 'rv_leaves.leaves.manipulation.grasping',
      'class_name': 'Grasp',
    }]
  }
)

Method.methods['move_to(tool arg0, object arg1)'] = Method(
  name='move_to(tool arg0, object arg1)',
  root = {
    'type': 'sequence',
    'children': [
      {
        'type': 'class',
        'package': 'lingua.leaves',
        'class_name': 'GetObjectPose',
        'args': {
          'load_value': '${arg1}',
        },
      },
      {
        'type': 'class',
        'package': 'rv_leaves.leaves.generic.console',
        'class_name': 'Print',
      },
      {
        'type': 'class',
        'package': 'rv_leaves.leaves.manipulation.motion',
        'class_name': 'MoveGripperToPose',
      }
    ]
  }
)

if __name__ == '__main__':
  rospy.init_node('lingua_reset')
  Method.save()